{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoFrom","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","console","log","addTask","completed","alert","className","onSubmit","htmlFor","type","id","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","isEdting","updateTodo","toggleTodo","onClick","class","TodoList","todos","remove","update","toggleCompletion","newTask","uuid","filter","todo","updatedTask","updatedTodos","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a772c3b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './NewTodoForm.css'\r\n\r\nclass NewTodoFrom extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        console.log();\r\n        if (this.state.task !== '') {\r\n            this.props.addTask({ ...this.state, completed: false });\r\n            this.setState(\r\n                {\r\n                    task: ''\r\n                }\r\n            )\r\n        } else {\r\n            alert(\"Emtpty Task!\");\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input type=\"text\" id=\"task\" name=\"task\" placeholder=\"New Todo\"\r\n                    value={this.state.task} onChange={this.handleChange} />\r\n                <button>New ToDo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodoFrom;\r\n","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        };\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({\r\n            isEditing: !this.state.isEdting\r\n        });\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleUpdate(evt) {\r\n        evt.preventDefault();\r\n        // take new task data and pass it up tp parent\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({ isEditing: false });\r\n    }\r\n\r\n    handleToggle(evt) {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input type='text' name=\"task\" value={this.state.task} onChange={this.handleChange} />\r\n                        <button>Save</button>\r\n                    </form >\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <li onClick={this.handleToggle} className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}>{this.props.task}</li>\r\n                    <div className=\"Todo-btn\">\r\n                        <button onClick={this.toggleForm}><i class='fas fa-pen'></i></button>\r\n                        <button onClick={this.handleRemove}><i class='fas fa-trash'></i></button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport Todo from './Todo';\r\nimport { v4 as uuid } from 'uuid';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.addTask = this.addTask.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n    addTask(task) {\r\n        let newTask = { ...task, id: uuid() }\r\n        this.setState(state => ({\r\n            todos: [...this.state.todos, newTask]\r\n        }));\r\n    }\r\n\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => (todo.id !== id))\r\n        })\r\n\r\n    }\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, task: updatedTask };\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({ todos: updatedTodos });\r\n\r\n    }\r\n\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed };\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n    render() {\r\n        let todos = this.state.todos.map(todo => (\r\n            <Todo\r\n                key={todo.id}\r\n                id={todo.id}\r\n                task={todo.task}\r\n                removeTodo={this.remove}\r\n                updateTodo={this.update}\r\n                completed={todo.completed}\r\n                toggleTodo={this.toggleCompletion} />\r\n\r\n        ));\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List! <span>A simple React Todo List App</span></h1>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodoForm addTask={this.addTask} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}