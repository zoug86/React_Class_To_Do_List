{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoFrom","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","addTask","completed","className","onSubmit","htmlFor","type","id","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","isEdting","updateTodo","toggleTodo","onClick","class","TodoList","todos","remove","update","toggleCompletion","newTask","uuid","filter","todo","updatedTask","updatedTodos","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eede9a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './NewTodoForm.css'\r\n\r\nclass NewTodoFrom extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.addTask({ ...this.state, completed: false });\r\n        this.setState(\r\n            {\r\n                task: ''\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input type=\"text\" id=\"task\" name=\"task\" placeholder=\"New Todo\"\r\n                    value={this.state.task} onChange={this.handleChange} />\r\n                <button>New ToDo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodoFrom;\r\n","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        };\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({\r\n            isEditing: !this.state.isEdting\r\n        });\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleUpdate(evt) {\r\n        evt.preventDefault();\r\n        // take new task data and pass it up tp parent\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({ isEditing: false });\r\n    }\r\n\r\n    handleToggle(evt) {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input type='text' name=\"task\" value={this.state.task} onChange={this.handleChange} />\r\n                        <button>Save</button>\r\n                    </form >\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <li onClick={this.handleToggle} className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}>{this.props.task}</li>\r\n                    <div className=\"Todo-btn\">\r\n                        <button onClick={this.toggleForm}><i class='fas fa-pen'></i></button>\r\n                        <button onClick={this.handleRemove}><i class='fas fa-trash'></i></button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport Todo from './Todo';\r\nimport { v4 as uuid } from 'uuid';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.addTask = this.addTask.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n    addTask(task) {\r\n        let newTask = { ...task, id: uuid() }\r\n        this.setState(state => ({\r\n            todos: [...this.state.todos, newTask]\r\n        }));\r\n    }\r\n\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => (todo.id !== id))\r\n        })\r\n\r\n    }\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, task: updatedTask };\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({ todos: updatedTodos });\r\n\r\n    }\r\n\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed };\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n    render() {\r\n        let todos = this.state.todos.map(todo => (\r\n            <Todo\r\n                key={todo.id}\r\n                id={todo.id}\r\n                task={todo.task}\r\n                removeTodo={this.remove}\r\n                updateTodo={this.update}\r\n                completed={todo.completed}\r\n                toggleTodo={this.toggleCompletion} />\r\n\r\n        ));\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List! <span>A simple React Todo List App</span></h1>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodoForm addTask={this.addTask} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}